import event, time, cyberpi, mbuild, mbot2

kp = 0
vitesse = 0
vitesse_gauche = 0
vitesse_droite = 0
number = 0
grand = 0
zone = True
gauche = 0
droite = 0

i = 0

#script qui permet d'afficher a l'écran une interface utilisateur
@event.start
def on_start():
    global kp, vitesse, vitesse_gauche, vitesse_droite
    cyberpi.console.println("B pour GO")
    cyberpi.console.println("A pour STOP")

#script qui permet de reinitialiser les variables et arrêter le robot
@event.is_press('a')
def is_joy_press():
    global kp, vitesse, vitesse_gauche, vitesse_droite, number, grand, i
    i = 0
    grand = 0
    number = 0
    cyberpi.stop_other()
    mbot2.drive_power(0, 0)
    cyberpi.led.off("all")

#script du suiveur de ligne
@event.is_press('b')
def is_joy_press1():
    global kp, vitesse, vitesse_gauche, vitesse_droite, number, grand, zone
    cyberpi.stop_other()
    mbuild.quad_rgb_sensor.set_led_color("blue", 1)

    kp = 0.2
    while True:
        angle = -cyberpi.get_pitch() #récuperation de l'angle
        if angle < -9:
             vitesse = 55
             cyberpi.led.on(1, 208, 194, "all")
        elif angle > 9:
             vitesse = 15
             cyberpi.led.on(170, 255, 1, "all")
        elif angle in [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]:
             vitesse = 23
        
        elif (mbuild.quad_rgb_sensor.is_color("green","R1",1)) or (mbuild.quad_rgb_sensor.is_color("green","R2",1)) or (mbuild.quad_rgb_sensor.is_color("cyan","R1",1)) or (mbuild.quad_rgb_sensor.is_color("cyan","R2",1)):
            number = 0
            mbot2.EM_stop("ALL")
            mbot2.straight(-0.3)
            cyberpi.led.on(60, 255, 0, "all")
            time.sleep(.5)
            if (mbuild.quad_rgb_sensor.is_color("green","L1",1)) or (mbuild.quad_rgb_sensor.is_color("green","L2",1)) or (mbuild.quad_rgb_sensor.is_color("cyan","L1",1)) or (mbuild.quad_rgb_sensor.is_color("cyan","L2",1)):
                #demis tour
                mbot2.straight(2)
                cyberpi.led.on(60, 255, 0, "all")
                time.sleep(.5)
                if mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [3, 7, 15]:
                    mbot2.EM_turn(280, 50, "ALL")
                    while not (mbuild.quad_rgb_sensor.is_line("R1",1)):
                        mbot2.turn_right(30)
            else:
                #virage à droite
                mbot2.straight(2.5)
                time.sleep(.3)
                #vérification de virage
                if mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [3, 7, 15]:
                    mbot2.straight(4.5)
                    mbot2.EM_turn(175, 50, "ALL")

                    #rotation jusqu'à croisement d'une ligne
                    while not (mbuild.quad_rgb_sensor.is_line("L1",1)):
                        mbot2.turn_right(30)

        #si on voit une pastille verte à gauche
        elif (mbuild.quad_rgb_sensor.is_color("green","L1",1)) or (mbuild.quad_rgb_sensor.is_color("green","L2",1)) or  (mbuild.quad_rgb_sensor.is_color("cyan","L1",1)) or (mbuild.quad_rgb_sensor.is_color("cyan","L2",1)):
            number = 0
            mbot2.EM_stop("ALL")
            mbot2.straight(-0.3)
            cyberpi.led.on(60, 255, 0, "all")
            time.sleep(.5)
            if (mbuild.quad_rgb_sensor.is_color("green","R1",1)) or (mbuild.quad_rgb_sensor.is_color("green","R2",1)) or (mbuild.quad_rgb_sensor.is_color("cyan","R1",1)) or (mbuild.quad_rgb_sensor.is_color("cyan","R2",1)):
                #demis-tours
                mbot2.straight(2)
                time.sleep(.5)
                if mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [3, 7, 15]:
                    mbot2.EM_turn(280, 50, "ALL")
                    while not (mbuild.quad_rgb_sensor.is_line("R1",1)):
                        mbot2.turn_right(30)
            else:
                # virage à gauche
                mbot2.straight(2.5)
                time.sleep(.5)

                #vérification de virage
                if mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [12, 14, 15]:
                    mbot2.straight(4.5)
                    mbot2.EM_turn(-175, 50, "ALL")

                    #rotation jusqu'à croisement d'une ligne
                    while not (mbuild.quad_rgb_sensor.is_line("R1",1)):
                        mbot2.turn_left(30)
        
        elif mbuild.quad_rgb_sensor.is_color("red","L2",1) or mbuild.quad_rgb_sensor.is_color("red","L1",1) or mbuild.quad_rgb_sensor.is_color("red","R2",1) or mbuild.quad_rgb_sensor.is_color("red","R1",1):
            cyberpi.led.on(255, 0, 0, "all")
            mbot2.forward(0)
            time.sleep(20)
        
        #si le robot perd la ligne
        if mbuild.quad_rgb_sensor.get_line_sta("all", 1) == 0: 

        
            if mbuild.quad_rgb_sensor.get_red_sta("all", 1) != 15:
                #il recule pour récuperer des informations sur la ligne
                while mbuild.quad_rgb_sensor.get_line_sta("all", 1) == 0:
                    mbot2.forward(-20)
                mbot2.forward(-20, 0.5)
                if (mbuild.quad_rgb_sensor.is_color("green","L1",1)) or (mbuild.quad_rgb_sensor.is_color("green","L2",1)) or  (mbuild.quad_rgb_sensor.is_color("green","R1",1)) or (mbuild.quad_rgb_sensor.is_color("green","R2",1)):
                    cyberpi.console.println("green")
                else:
                    mbot2.forward(20, 0.5)
  

                  #si virage a droite
            if mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [1, 3, 7]:
                      #Il se met en postion et tourne jusqu'à croiser une ligne
                mbot2.straight(6)
                mbot2.turn(20)
                while not (mbuild.quad_rgb_sensor.is_line("R1",1)):
                    mbot2.turn_right(20)

                  #si virage à gauche
            elif mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [14, 12, 8]:
                mbot2.straight(6)
                mbot2.turn(-20)
                while not (mbuild.quad_rgb_sensor.is_line("L1",1)):
                    mbot2.turn_left(20)

            #si pointillés
            elif mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [2, 4, 6]:                    
                mbot2.straight(10)
                grand += 1

                if grand == 2:
                    mbot2.straight(14)
                    grand = 0
                    if mbuild.quad_rgb_sensor.get_line_sta("all", 1) == 0:
                        t = False
                        for i in range(4):
                            if mbuild.quad_rgb_sensor.get_line_sta("all", 1) != 0:
                                mbot2.straight(4)
                                t = True
                                break
                            else:
                                mbot2.turn(20)
                        if t == False:
                            mbot2.turn(-80)
                            for i in range(4):
                                if mbuild.quad_rgb_sensor.get_line_sta("all", 1) != 0:
                                    mbot2.straight(4)
                                    break
                                else:
                                    mbot2.turn(-20)
                        elif t == False:
                            mbot2.turn(80)

 #detection d'obstacles 
        elif mbuild.ultrasonic2.get(1) < 9:
            mbot2.turn(90)
            d_droite = mbuild.ultrasonic2.get(1)
            mbot2.turn(-168)
            d_gauche = mbuild.ultrasonic2.get(1)
            mbot2.turn(80)
            
            if d_droite > d_gauche:
                mbot2.turn(90)
                while not (mbuild.quad_rgb_sensor.is_line("L1",1)):
                    mbot2.drive_speed(35, -65)
                mbot2.straight(5)
                while not (mbuild.quad_rgb_sensor.is_line("L1",1)):
                    mbot2.turn_right(30)
            
            else:
                cyberpi.console.clear()
                number = 0
                mbot2.turn(-90)
                while not (mbuild.quad_rgb_sensor.is_line("R1",1)):
                    mbot2.drive_speed(65, -35)
                mbot2.straight(5)
                while not (mbuild.quad_rgb_sensor.is_line("R1",1)):
                    mbot2.turn_left(30)

        
        else:
            #sinon il suit la ligne grâce à une valeur entre -100 et 100 avec laquel ont determine une
            #vitesse en pourcentage pour chaque moteur
            vitesse_gauche = (vitesse - kp * mbuild.quad_rgb_sensor.get_offset_track(1))
            vitesse_droite = -1 * ((vitesse + kp * mbuild.quad_rgb_sensor.get_offset_track(1)))
            mbot2.drive_power(vitesse_gauche, vitesse_droite)
            grand = 0