import event, time, cyberpi, mbuild, mbot2

#initialisation de toutes les variables
kp = 0
vitesse = 0
vitesse_gauche = 0
vitesse_droite = 0
number = 0
grand = 0

i = 0

def chercher_zone():
    global i
    while i == 0:
        while mbuild.smart_camera.detect_sign_location(1, 'up', 1):
            mbot2.forward(25)
    
        while mbuild.smart_camera.detect_sign_location(1, 'left', 1) or mbuild.smart_camera.detect_sign_location(1, 'left', 1) and mbuild.smart_camera.detect_sign_location(1, 'middle', 1) or mbuild.smart_camera.detect_sign_location(1, 'left', 1) and mbuild.smart_camera.detect_sign_location(1, 'up', 1):
            mbot2.turn_left(7)

        while mbuild.smart_camera.detect_sign_location(1, 'right', 1) or mbuild.smart_camera.detect_sign_location(1, 'right', 1) and mbuild.smart_camera.detect_sign_location(1, 'middle', 1) or mbuild.smart_camera.detect_sign_location(1, 'right', 1) and mbuild.smart_camera.detect_sign_location(1, 'up', 1):
            mbot2.turn_right(7)
        

        if mbuild.smart_camera.detect_sign_location(1, 'middle', 1):
            mbot2.straight(13)
            if i == 0:
                mbot2.servo_set(0,"S3")
                time.sleep(.5)
                for i in range(15):
                    mbot2.forward(100, .05)
                    mbot2.forward(-110, .05)
                mbot2.forward(-110, .05)
                i += 1
    mbot2.EM_stop("ALL")

#script qui permet d'afficher a l'écran une interface utilisateur
@event.start
def on_start():
    global kp, vitesse, vitesse_gauche, vitesse_droite
    cyberpi.console.println("DOWN pour GO")
    cyberpi.console.println("UP pour STOP")
    cyberpi.console.println("MIDDLE pour TEST")

#script qui permet de reinitialiser les variables et arrêter le robot
@event.is_press('a')
def is_joy_press():
    global kp, vitesse, vitesse_gauche, vitesse_droite, number, grand, i
    i = 0
    grand = 0
    number = 0
    cyberpi.stop_other()
    mbot2.drive_power(0, 0)
    cyberpi.led.off("all")
    mbot2.servo_set(90,"S3")

#script du suiveur de ligne
@event.is_press('b')
def is_joy_press1():
    global kp, vitesse, vitesse_gauche, vitesse_droite, number, grand
    cyberpi.stop_other()
    mbuild.quad_rgb_sensor.set_led_color("red", 1)
    mbuild.smart_camera.set_mode("color", 1)

    #modification des variables de vitesse et de sensibilité
    kp = 0.55
    vitesse = 22
    while True:
        angle = -cyberpi.get_pitch() #récuperation de l'angle
        if angle < -9:
            vitesse = 40
        elif angle > 9:
            vitesse = 8
        elif angle in [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]:
            vitesse = 28
        
        if mbuild.ranging_sensor.get_distance(1) >= 200:
            mbot2.straight(4)
            if mbuild.quad_rgb_sensor.get_line_sta("all", 1) == 0:
                mbuild.smart_camera.set_mode("color", 1)
                mbot2.straight(17)
                for i in range(2):
                    GAUCHE = mbuild.ultrasonic2.get(2)
                    cyberpi.console.println(GAUCHE)
                    time.sleep(2)

                    mbot2.EM_turn(250, 50, "ALL")
                    droite = mbuild.ultrasonic2.get(1)
                    cyberpi.console.println(droite)
                    time.sleep(2)

                    largeur = (droite + GAUCHE + 15)
                    mbot2.straight((largeur / 2) - GAUCHE)
                    cyberpi.console.println(largeur)
                    cyberpi.console.println((largeur / 2) - GAUCHE)
            
                for i in range(10):
                    if mbuild.smart_camera.detect_sign(1, 1):
                        cyberpi.console.println("vue")
                        chercher_zone()
                        break
                    else:
                        mbot2.EM_turn(100, 50, "ALL")
        
        elif (mbuild.quad_rgb_sensor.is_color("green","R1",1)) or (mbuild.quad_rgb_sensor.is_color("green","R2",1)):
            number = 0
            mbot2.EM_stop("ALL")
            mbot2.straight(-0.3)
            time.sleep(.5)
            if (mbuild.quad_rgb_sensor.is_color("green","L1",1)) or (mbuild.quad_rgb_sensor.is_color("green","L2",1)) or (mbuild.quad_rgb_sensor.is_color("cyan","L1",1)) or (mbuild.quad_rgb_sensor.is_color("cyan","L2",1)):
                #demis tour
                mbot2.straight(2)
                time.sleep(.5)
                if mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [3, 7, 15]:
                    mbot2.EM_turn(280, 50, "ALL")
                    while not (mbuild.quad_rgb_sensor.is_line("R1",1)):
                        mbot2.turn_right(30)
            else:
                #virage à droite
                mbot2.straight(2)
                time.sleep(.3)
                #vérification de virage
                if mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [3, 7, 15]:
                    mbot2.straight(5)
                    mbot2.turn(40)

                    #rotation jusqu'à croisement d'une ligne
                    while not (mbuild.quad_rgb_sensor.is_line("L1",1)):
                        mbot2.turn_right(30)

        #si on voit une pastille verte à gauche
        elif (mbuild.quad_rgb_sensor.is_color("green","L1",1)) or (mbuild.quad_rgb_sensor.is_color("green","L2",1)):
            number = 0
            mbot2.EM_stop("ALL")
            mbot2.straight(-0.3)
            time.sleep(.5)
            if (mbuild.quad_rgb_sensor.is_color("green","R1",1)) or (mbuild.quad_rgb_sensor.is_color("green","R2",1)) or (mbuild.quad_rgb_sensor.is_color("cyan","R1",1)) or (mbuild.quad_rgb_sensor.is_color("cyan","R2",1)):
                #demis-tours
                mbot2.straight(2)
                time.sleep(.5)
                if mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [3, 7, 15]:
                    mbot2.EM_turn(280, 50, "ALL")
                    while not (mbuild.quad_rgb_sensor.is_line("R1",1)):
                        mbot2.turn_right(30)
            else:
                # virage à gauche
                mbot2.straight(2)
                time.sleep(.5)

                #vérification de virage
                if mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [12, 14, 15]:
                    mbot2.straight(5)
                    mbot2.turn(-40)

                    #rotation jusqu'à croisement d'une ligne
                    while not (mbuild.quad_rgb_sensor.is_line("R1",1)):
                        mbot2.turn_left(30)
        
        #si le robot perd la ligne
        elif mbuild.quad_rgb_sensor.get_line_sta("all", 1) == 0:
            number = 0
            continuer = True
            if mbuild.quad_rgb_sensor.get_red_sta("all", 1) != 15:
                #il recule pour récuperer des informations sur la ligne
                while mbuild.quad_rgb_sensor.get_line_sta("all", 1) == 0:
                    if mbuild.ranging_sensor.get_distance(1) >= 200:
                        mbot2.forward(0)
                        break
                    else:
                        mbot2.forward(-20)
                mbot2.forward(-20, 0.1)
                        

                #si virage a droite
                if mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [1, 3, 7]:
                    #Il se met en postion et tourne jusqu'à croiser une ligne
                    mbot2.straight(4.5)
                    grand = 0
                    mbot2.turn(40)
                    while not (mbuild.quad_rgb_sensor.is_line("R1",1)):
                        mbot2.turn_right(30)

                #si virage à gauche
                elif mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [14, 12, 8]:
                    #Il se met en postion et tourne jusqu'à croiser une ligne
                    mbot2.straight(4.5)
                    grand = 0
                    mbot2.turn(-40)
                    while not (mbuild.quad_rgb_sensor.is_line("L1",1)):
                        mbot2.turn_left(30)

                #si pointillés
                elif mbuild.quad_rgb_sensor.get_line_sta("all", 1) in [2, 4, 6]:                    
                    mbot2.straight(10)
                    grand += 1

                    if grand == 2:
                        mbot2.straight(14)
                        grand = 0
                        if mbuild.quad_rgb_sensor.get_line_sta("all", 1) == 0:
                            t = False
                            for i in range(4):
                                if mbuild.quad_rgb_sensor.get_line_sta("all", 1) != 0:
                                    mbot2.straight(10)
                                    while not (mbuild.quad_rgb_sensor.is_line("L1",1)):
                                        mbot2.turn_right(30)
                                    t = True
                                    break
                                else:
                                    mbot2.turn(15)
                            if t == False:
                                mbot2.turn(-90)
                                for i in range(4):
                                    if mbuild.quad_rgb_sensor.get_line_sta("all", 1) != 0:
                                        mbot2.straight(10)
                                        while not (mbuild.quad_rgb_sensor.is_line("R1",1)):
                                            mbot2.turn_left(30)
                                        break
                                    else:
                                        mbot2.turn(-15)
                # si rouge
                elif mbuild.quad_rgb_sensor.is_line("L2",1) or mbuild.quad_rgb_sensor.is_line("L1",1) or mbuild.quad_rgb_sensor.is_line("R2",1) or mbuild.quad_rgb_sensor.is_line("R1",1):
                    mbot2.straight(-2)
                    if (mbuild.quad_rgb_sensor.is_color("green","R1",1)) or (mbuild.quad_rgb_sensor.is_color("green","R2",1)) or (mbuild.quad_rgb_sensor.is_color("green","L1",1)) or (mbuild.quad_rgb_sensor.is_color("green","L2",1)):
                        pass
                    else:
                        mbot2.straight(2)
                        time.sleep(20)

        elif mbuild.ultrasonic2.get(1) < 7:
            mbot2.turn(130)
            d_droite = mbuild.ultrasonic2.get(1)
            mbot2.turn(-260)
            d_gauche = mbuild.ultrasonic2.get(1)
            mbot2.turn(130)

            if d_droite > d_gauche:
                number = 0
                mbot2.EM_turn(110, 50, "ALL")
                mbot2.straight(22)
                mbot2.EM_turn(-105, 50, "ALL")
                mbot2.straight(5)
                mbot2.EM_turn(-105, 50, "ALL")
                while mbuild.quad_rgb_sensor.get_line_sta("all", 1) == 0:
                    mbot2.forward(20)
    

                mbot2.straight(7)
                while not (mbuild.quad_rgb_sensor.is_line("L1",1)):
                    mbot2.turn_right(30)
            
            else:
                cyberpi.console.clear()
                number = 0
                mbot2.EM_turn(-110, 50, "ALL")
                mbot2.straight(22)
                mbot2.EM_turn(105, 50, "ALL")
                mbot2.straight(5)
                mbot2.EM_turn(105, 50, "ALL")
                while mbuild.quad_rgb_sensor.get_line_sta("all", 1) == 0:
                    mbot2.forward(20)
    

                mbot2.straight(7)
                while not (mbuild.quad_rgb_sensor.is_line("R1",1)):
                    mbot2.turn_right(-30)

        
        else:
            #sinon il suit la ligne grâce à une valeur entre -100 et 100 avec laquel ont determine une
            #vitesse en pourcentage pour chaque moteur
            vitesse_gauche = (vitesse - kp * mbuild.quad_rgb_sensor.get_offset_track(1))
            vitesse_droite = -1 * ((vitesse + kp * mbuild.quad_rgb_sensor.get_offset_track(1)))
            mbot2.drive_power(vitesse_gauche, vitesse_droite)
            if number == 1100:
                mbot2.forward(-100, .08)
                mbot2.forward(100, .7)
                number = 0
            number += 1
            grand = 0
